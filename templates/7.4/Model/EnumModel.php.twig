<?php

declare (strict_types=1);
{% if namespace|length > 0 %}
namespace {{ namespace }};
{% endif %}

use Axtiva\FlexibleGraphql\Generator\Exception\UnknownEnumValue;
use Axtiva\FlexibleGraphql\Type\EnumInterface;

/**
 * This code is @generated by axtiva/flexible-graphql-php
 * and will be regenerated. Do not edit it manually
 * PHP representation of graphql enum {{ enum_name }}
 {% if enum_description|length > 0 %}
 * {{ enum_description }}
 {% endif %}
 */
final class {{ short_class_name }} implements EnumInterface
{
{% for enum in enums %}
{% if enum.description|length > 0 %}
    /**
     * {{ enum.description }}
     */
{% endif %}
    public const {{ enum.value }} = '{{ enum.value }}';
{% endfor %}
    public string $value;
    private static array $map = [
{% for enum in enums %}
        self::{{ enum.value }} => true,
{% endfor %}
    ];

    public function __construct($value)
    {
        if (!isset(self::$map[$value])) {
            throw new UnknownEnumValue(__CLASS__, $value);
        }
        $this->value = $value;
    }

    public function __toString(): string
    {
        return $this->value;
    }
}